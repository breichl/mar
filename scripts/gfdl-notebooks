import os
import sys
import subprocess
import yaml
import argparse

def write_temp_config(notebook_name, config, global_experiment, global_start_year, global_end_year):
    """
    Write a temporary configuration file for a specific notebook.

    Parameters
    ----------
    notebook_name : str
        The name of the notebook.
    config : dict
        The global configuration dictionary.
    global_experiment : str
        The global experiment name.
    global_start_year : int
        The global start year.
    global_end_year : int
        The global end year.

    Returns
    -------
    str
        The path to the temporary configuration file.
    """
    temp_config_data = config['notebooks'].get(notebook_name, {})
    if 'experiment' not in temp_config_data:
        temp_config_data['experiment'] = global_experiment
    if 'start_year' not in temp_config_data:
        temp_config_data['start_year'] = global_start_year
    if 'end_year' not in temp_config_data:
        temp_config_data['end_year'] = global_end_year
    
    temp_config_path = os.path.join(os.getcwd(), 'mar_config.yaml')
    with open(temp_config_path, 'w') as temp_config_file:
        yaml.dump(temp_config_data, temp_config_file)
    
    return temp_config_path

def main():
    """
    Main function to process and execute Jupyter notebooks based on the provided configuration.

    This function reads the configuration from a YAML file and/or command-line arguments, sets up the environment,
    processes the specified notebooks, and executes them. Temporary configuration files are created for each notebook
    if specific settings are provided.

    Command-line Arguments
    ----------------------
    --experiment : str, optional
        The experiment name.
    --outdir : str, optional
        The output directory (default: current directory).
    --config : str, optional
        The path to the YAML configuration file.
    --start_year : int, optional
        The start year for the experiment.
    --end_year : int, optional
        The end year for the experiment.
    --only_notebook : str, optional
        Only process and execute the specified notebook.
    --test : bool, optional
        Run in test mode, printing actions without executing them.
    """
    parser = argparse.ArgumentParser(description="Process some notebooks.")
    parser.add_argument('--experiment', help="Experiment name")
    parser.add_argument('--outdir', default='.', help="Output directory (default: current directory)")
    parser.add_argument('--config', help="Path to YAML configuration file")
    parser.add_argument('--start_year', type=int, help="Start year for the experiment")
    parser.add_argument('--end_year', type=int, help="End year for the experiment")
    parser.add_argument('--only_notebook', help="Only process and execute the specified notebook")
    parser.add_argument('--test', action='store_true', help="Run in test mode, printing actions without executing them")

    args = parser.parse_args()

    config_path = args.config if args.config else 'config.yaml'
    
    if not os.path.exists(config_path):
        print(f"Configuration file '{config_path}' not found.")
        sys.exit(1)

    config = {}

    # Load configuration from YAML file
    with open(config_path, 'r') as config_file:
        config = yaml.safe_load(config_file)

    experiment = args.experiment if args.experiment else config.get('experiment')
    outdir = args.outdir if args.outdir else config.get('outdir', '.')
    kernel_name = config.get('kernel_name', 'python3')
    exclude_notebooks = config.get('exclude', [])
    only_notebooks = config.get('only', [])
    start_year = args.start_year if args.start_year else config.get('start_year')
    end_year = args.end_year if args.end_year else config.get('end_year')
    only_notebook = args.only_notebook
    test_mode = args.test

    if not experiment:
        print("Experiment name must be specified either in the command line or the config file.")
        sys.exit(1)

    print(experiment)

    outdir = os.path.join(outdir, experiment)

    print(f"MAR: writing results to {outdir}")

    os.environ["PYDEVD_DISABLE_FILE_VALIDATION"] = "1"
    os.environ["MAR_DORA_ID"] = experiment
    if start_year:
        os.environ["START_YEAR"] = str(start_year)
    if end_year:
        os.environ["END_YEAR"] = str(end_year)

    for key, value in os.environ.items():
        if key.startswith("MAR") or key in ["START_YEAR", "END_YEAR"]:
            print(f"{key}={value}")

    notebooks_dir = os.path.join(os.getcwd(), 'notebooks')
    if only_notebook:
        notebooks_to_process = [only_notebook] if only_notebook.endswith('.ipynb') else [f"{only_notebook}.ipynb"]
    else:
        notebooks_to_process = [f for f in os.listdir(notebooks_dir) if f.endswith('.ipynb')]
        if only_notebooks:
            notebooks_to_process = [f for f in notebooks_to_process if os.path.basename(f) in only_notebooks]
        else:
            notebooks_to_process = [f for f in notebooks_to_process if os.path.basename(f) not in exclude_notebooks]

    if not test_mode:
        os.makedirs(outdir, exist_ok=True)
        os.chdir(outdir)
        print(os.getcwd())

    for notebook in notebooks_to_process:
        filename = os.path.basename(notebook)
        temp_config_path = write_temp_config(filename, config, experiment, start_year, end_year)
        if temp_config_path:
            os.environ["TEMP_CONFIG_PATH"] = temp_config_path
            with open(temp_config_path, 'r') as file:
                temp_config_contents = yaml.safe_load(file)
            print(f"Temporary config file path: {temp_config_path}")
            print(f"Temporary config file contents:\n{yaml.dump(temp_config_contents, default_flow_style=False)}")
        print(f"Executing {filename}")
        if not test_mode:
            subprocess.run(['cp', os.path.join(notebooks_dir, notebook), '.'])
            subprocess.run(['jupyter', 'nbconvert', '--to', 'notebook', '--execute', 
                            f'--ExecutePreprocessor.kernel_name={kernel_name}', filename, '--output', filename])
            subprocess.run(['jupyter', 'nbconvert', '--to', 'html', filename])
        else:
            print(f"Would copy {os.path.join(notebooks_dir, notebook)} to current directory.")
            print(f"Would execute {filename} with Jupyter nbconvert.")
            print(f"Would convert {filename} to HTML.")
        if temp_config_path:
            os.remove(temp_config_path)

    os.chdir(os.path.join(os.getcwd(), '..'))

if __name__ == "__main__":
    main()

